[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "imagefixer"
dynamic = ["version"]
description = "Python utility to resize images and create thumbnails"
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
authors = [
    { name = "Mike Horrocks", email = "mikeh_74_@outlook.com" },
]
keywords = ["image", "resize", "thumbnail", "PIL", "Pillow"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "Pillow>=8.3.2",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/mikeh74/image_sizer"
Repository = "https://github.com/mikeh74/image_sizer"
Issues = "https://github.com/mikeh74/image_sizer/issues"

[project.scripts]
imagefixer = "imagefixer.cli:main"

[tool.hatch.version]
path = "src/imagefixer/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE.txt",
]

[tool.hatch.build.targets.wheel]
packages = ["src/imagefixer"]

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10+
target-version = "py310"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "env-image",
]

[tool.ruff.lint]
# Enable these rule categories
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
]

# Ignore these specific rules
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "B905",  # `zip()` without an explicit `strict=` parameter
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["imagefixer"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--verbose --cov=imagefixer --cov-report=term-missing"

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test
